3.4 Monitoring and Controlling Mechanisms

> Content:

We will discuss how this product will be distributed and managed during its development in this section.

A. Project Repository

The PlasmaGraph project's files will all be distributed and managed via the project's GitHub page. Said service is a version control system designed to manage multiple versions of files, allowing for easy access while providing excellent error-correction mechanisms. 

Due to the nature of the GitHub service, any person may make a copy of the project's contents and begin work on their own "fork" of the project. Therefore, simple access to the files, that is, being able to view the contents, of said repository will be available to anyone, but modification access to the contents of the main branch of the project will only be provided to the group members via the "Contributor" status. The Project Lead will only be able to grant this status, therefore, to people that request integration into the project group. Any group member that leaves the project will have his or her modification rights revoked. This way, access to the main branch of the project, called the "master" branch, will be protected from malicious users.

The project's GitHub web page is located in: https://github.com/CherimaeNemeta/PlasmaGraph

B. Repository Organization

The project's GitHub repository will be structured in the following format:

bin
docs
lib
specs
src
test

The "bin" directory will hold the compiled versions of the product. The "docs" directory will hold the JavaDocs created as a result of the code documentation. (See Work Package B1 in section 5.1 of this document for more details.) The "lib" directory will hold the additional libraries used by the project via the JAR files located within; linking to this via the Eclipse "External Libraries" feature will allow access to the support functions that they provide. The "specs" directory will hold the SRS / SDD / STD / SPMP / presentation documents, as well as their fragments and any support files relevant to the product's development or maintenance. This directory will also hold the meeting notes for the Client and the Senior Project Professor. The "src" directory will hold the entirety of the Eclipse workspace; this way, all the relevant files that directly form a part of the PlasmaGraph product will be easily saved in the repository. Finally, the "test" directory will hold the environment for testing the product, including sample test data and test template data.

C. Repository Management

Each project member will maintain their own personal version of the project's contents; this is known as a "branch" in GitHub. This will serve to isolate their changes and manage their individual work until it (their work) is ready to be added to the main branch's ("master") contents. This section will discuss how the project members will perform these changes, view their changes, and include their work into the project's "master" branch.

Note: Please refer to Git and GitHub documentation to learn how to perform some of these functions.

	1. Documenting Changes (and format)
		Once some amount of work is completed, a project member can use GitHub's (or Git's, in the case of Linux computers) "Commit" function to document said changes to that point. 

		Commits contain the full list of changes, allowing for easy viewing of the details changed per commit. However, the commit's message allows the member to write a summary of the changes made, facilitating future reviewing. The user must submit a descriptive message, noting the general changes that were made to the project. For example, if the user has programmed a prototype XML data cleaner for the product's code, then the member must write a commit message that mentions that they have created said prototype and describe (briefly) what it does.

		Once at least one set of changes has been committed, the member may then move those changes over to their branch via the "Push" function. Since this project is not security-sensitive, either method for Pushing commits is acceptable. (That is, the HTTP or SSL URL links are both valid.)

	2. Reviewing Changes
		Changes can be reviewed via the GitHub project page's "Commits" viewing option. The commits of branches that aren't the main one can be accessed by navigating to the "Branches" viewing option and selecting the desired branch, then viewing the "Commits" for that branch.

	3. Moving Changes to the Master Branch
		When a sufficiently-large milestone has been reached in a branch (such as when a specification document like the SRS / SDD / STD / SPMP is completed), said data should be moved to the main branch via the Pull Request function. To do so, said project member must create a new Pull Request between the base branch, the "Master" branch, and the comparing branch, the project member's branch, and include the request's reason as a comment. Once done, the member will discuss the situation with the Project Lead, allowing the Project Lead to approve or deny it as she or he sees fit. If valid, the Project Lead will opt to merge the two. The project member will then have to create a new branch in order to continue work on the project. This process allows other project members to routinely take advantage of new work related to the project without sacrificing much of the main branch's quality.

D. Problem Resolution

Solution to the various possible problems that may arise will be considered on a per-situation basis. Solutions such as large-scale deletion/merging, or drastic tools such as "rebase" will be used only when absolutely necessary. The Project Lead should discuss the options available with the Design Lead before deciding on a course of action.